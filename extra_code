import numpy as np
import seaborn as sns
from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
from matplotlib import colors
from scipy.stats import gaussian_kde
from mpl_toolkits.axes_grid1 import make_axes_locatable


'''
array = pd.DataFrame(freqdf).to_numpy()

mx = freqdf.to_numpy().max()
mn = freqdf.to_numpy().min()

cmap = colors.ListedColormap(['blue', 'red'])
bounds = [mn, 1420.405751, mx]
norm = colors.BoundaryNorm(bounds, cmap.N)
#cax = divider.append_axes('right', size='5%', pad=0.05)

fig, ax = plt.subplots()
canvas = fig.canvas

im = ax.imshow(freqdf, cmap=cmap, alpha=magdf)#, alpha=magdf, norm=norm)
#plt.colorbar(im)
plt.show()
'''





'''
fig1, ax1 = plt.subplots()
canvas1 = fig.canvas

im1 = ax1.imshow(freqdf, cmap=cmap, alpha=magdf, norm=norm, interpolation='catrom')
plt.show()

fig0, ax0 = plt.subplots()
canvas0 = fig.canvas

im0 = ax0.imshow(freqdf, cmap=cmap, alpha=magdf, norm=norm, interpolation='mitchell')
plt.show()
'''
'''
mx = magdf.to_numpy().max()
mn = magdf.to_numpy().min()

#print(mx, mn)
fig, ax = plt.subplots()
im = ax.imshow([[1]])
plt.show()'''


'''if response.status_code == 200:
    print("Time: ", response.json().get('time'))
    print("Location: ", response.json().get('location'))
    print("View: ", response.json().get('view'))

# Get a list of available action IDs:
url_actions = "stelaction/list"
actions = requests.get(url_main + url_actions)
print(actions.status_code)
if actions.status_code == 200:
    print(actions.json())'''

    '''response = requests.get(url_main + "main/status")
print("Status: ", response.status_code)'''

'''
array = pd.DataFrame(freqdf).to_numpy()

mx = freqdf.to_numpy().max()
mn = freqdf.to_numpy().min()

cmap = colors.ListedColormap(['blue', 'red'])
bounds = [mn, 1420.405751, mx]
norm = colors.BoundaryNorm(bounds, cmap.N)
#cax = divider.append_axes('right', size='5%', pad=0.05)

fig, ax = plt.subplots()
canvas = fig.canvas

im = ax.imshow(freqdf, cmap=cmap, alpha=magdf)#, alpha=magdf, norm=norm)
#plt.colorbar(im)
plt.show()
'''





'''
fig1, ax1 = plt.subplots()
canvas1 = fig.canvas

im1 = ax1.imshow(freqdf, cmap=cmap, alpha=magdf, norm=norm, interpolation='catrom')
plt.show()

fig0, ax0 = plt.subplots()
canvas0 = fig.canvas

im0 = ax0.imshow(freqdf, cmap=cmap, alpha=magdf, norm=norm, interpolation='mitchell')
plt.show()
'''
'''
mx = magdf.to_numpy().max()
mn = magdf.to_numpy().min()

#print(mx, mn)
fig, ax = plt.subplots()
im = ax.imshow([[1.5]])
plt.show()'''


'''from rtlsdr import RtlSdr

sdr = RtlSdr(1)


#print(sdr)

# configure device
sdr.sample_rate = 2.048e6  # Hz
sdr.center_freq = 2.4115e9     # Hz
sdr.freq_correction = 60   # PPM
sdr.gain = 'auto'

print(sdr.read_samples(512))
'''

'''import simplesoapy
import numpy

# List all connected SoapySDR devices
print(simplesoapy.detect_devices(as_string=True))

# Initialize SDR device
sdr = simplesoapy.SoapyDevice('driver=rtlsdr')

# Set sample rate
sdr.sample_rate = 2.56e6

# Set center frequency
sdr.freq = 88e6

# Setup base buffer and start receiving samples. Base buffer size is determined
# by SoapySDR.Device.getStreamMTU(). If getStreamMTU() is not implemented by driver,
# SoapyDevice.default_buffer_size is used instead
sdr.start_stream()

# Create numpy array for received samples
samples = numpy.empty(len(sdr.buffer) * 100, numpy.complex64)

# Receive all samples
sdr.read_stream_into_buffer(samples)

# Stop receiving
sdr.stop_stream()'''




'''from rtlsdr import RtlSdr

sdr = RtlSdr(1)

print(sdr)'''

'''# configure device
sdr.sample_rate = 2.048e6  # Hz
sdr.center_freq = 2.4115e9     # Hz
sdr.freq_correction = 60   # PPM
sdr.gain = 'auto'

print(sdr.read_samples(512))'''

'''from rtlsdr import RtlSdr

# Get a list of detected device serial numbers (str)
serial_numbers = RtlSdr.get_device_serial_addresses()

print(serial_numbers)'''

'''# Find the device index for a given serial number
device_index = RtlSdr.get_device_index_by_serial('00000001')

sdr = RtlSdr(device_index)

# Or pass the serial number directly:
sdr = RtlSdr(serial_number='00000001')'''


'''pull_data()
graph_data()'''


'''import numpy

# List all connected SoapySDR devices
print(simplesoapy.detect_devices(as_string=True))

# Initialize SDR device
sdr = simplesoapy.SoapyDevice('driver=airspy')

# Set sample rate
sdr.sample_rate = 6e6

# Set center frequency
sdr.freq = 940e6

# Setup base buffer and start receiving samples. Base buffer size is determined
# by SoapySDR.Device.getStreamMTU(). If getStreamMTU() is not implemented by driver,
# SoapyDevice.default_buffer_size is used instead
sdr.start_stream()

# Create numpy array for received samples
samples = numpy.empty(len(sdr.buffer) * 100, numpy.complex64)

# Receive all samples
sdr.read_stream_into_buffer(samples)

# Stop receiving
sdr.stop_stream()'''

    '''from PIL import Image
    im = Image.open('C:\\Users\\jojok\\Pictures\\Stellarium\\stellarium-021.png')
    width, height = im.size   # Get dimensions

    print(width, height)


    left = (width - 1300)/2
    top = (height - 1300)/2
    right = (width + 1300)/2
    bottom = (height + 1300)/2

    # Crop the center of the image
    im = im.crop((left, top, right, bottom))

    im.save('test_crop.png', 'PNG')'''

    '''# set projection style
    # StelCore.setcurrentProjectionNameI18n('Perspective')
    projection = requests.post(url_main + 'stelproperty/do', data={'id': 'StelCore.currentProjectionTypeKey',
                                                                   'value': 'ProjectionPerspective'})
    # ,'value': 'Perspective'})
    print("Projection: ", projection)'''


def overlay():
    mask = np.zeros((10,10))
    mask[3:-3, 3:-3] = 1 # white square in black background
    im = mask + np.random.randn(10,10) * 0.01 # random image
    masked = np.ma.masked_where(mask == 0, mask)

    plt.figure()
    plt.subplot(1,2,1)
    plt.imshow(im, 'gray', interpolation='none')
    plt.subplot(1,2,2)
    plt.imshow(im, 'gray', interpolation='none')
    plt.imshow(masked, 'jet', interpolation='none', alpha=0.7)
    plt.show()